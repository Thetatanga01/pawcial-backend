-- ============================================================
-- Flyway Migration: V1__PAWCIAL_SCHEMA.sql
-- Description: PAWCIAL Animal Shelter Management System - Initial Schema
-- Author: System
-- Date: 2025-01-19
-- ============================================================

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- Create schema
CREATE SCHEMA IF NOT EXISTS PAWCIAL;

-- ============================================================
-- DICTIONARY TABLES (No dependencies)
-- ============================================================

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_SEX (
                                                CODE TEXT PRIMARY KEY,
                                                LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_DOMESTIC_STATUS (
                                                            CODE TEXT PRIMARY KEY,
                                                            LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_FACILITY_TYPE (
                                                          CODE TEXT PRIMARY KEY,
                                                          LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_ZONE_PURPOSE (
                                                         CODE TEXT PRIMARY KEY,
                                                         LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_UNIT_TYPE (
                                                      CODE TEXT PRIMARY KEY,
                                                      LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_ASSET_TYPE (
                                                       CODE TEXT PRIMARY KEY,
                                                       LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_ASSET_STATUS (
                                                         CODE TEXT PRIMARY KEY,
                                                         LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_SERVICE_TYPE (
                                                         CODE TEXT PRIMARY KEY,
                                                         LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_EVENT_TYPE (
                                                       CODE TEXT PRIMARY KEY,
                                                       LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_SOURCE_TYPE (
                                                        CODE TEXT PRIMARY KEY,
                                                        LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_OUTCOME_TYPE (
                                                         CODE TEXT PRIMARY KEY,
                                                         LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_HOLD_TYPE (
                                                      CODE TEXT PRIMARY KEY,
                                                      LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_SIZE (
                                                 CODE TEXT PRIMARY KEY,
                                                 LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_TRAINING_LEVEL (
                                                           CODE TEXT PRIMARY KEY,
                                                           LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_TEMPERAMENT (
                                                        CODE TEXT PRIMARY KEY,
                                                        LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_HEALTH_FLAG (
                                                        CODE TEXT PRIMARY KEY,
                                                        LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_COLOR (
                                                  CODE TEXT PRIMARY KEY,
                                                  LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_MED_EVENT_TYPE (
                                                           CODE TEXT PRIMARY KEY,
                                                           LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_VACCINE (
                                                    CODE TEXT PRIMARY KEY,
                                                    LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_DOSE_ROUTE (
                                                       CODE TEXT PRIMARY KEY,
                                                       LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_PLACEMENT_TYPE (
                                                           CODE TEXT PRIMARY KEY,
                                                           LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_PLACEMENT_STATUS (
                                                             CODE TEXT PRIMARY KEY,
                                                             LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_OBSERVATION_CATEGORY (
                                                                 CODE TEXT PRIMARY KEY,
                                                                 LABEL TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_VOLUNTEER_AREA (
                                                           CODE TEXT PRIMARY KEY,
                                                           LABEL TEXT NOT NULL,
                                                           DESCRIPTION TEXT
);

CREATE TABLE IF NOT EXISTS PAWCIAL.DICT_VOLUNTEER_STATUS (
                                                             CODE TEXT PRIMARY KEY,
                                                             LABEL TEXT NOT NULL
);

-- ============================================================
-- CORE TABLES
-- ============================================================

-- Species
CREATE TABLE IF NOT EXISTS PAWCIAL.SPECIES (
                                               ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    SCIENTIFIC_NAME TEXT NOT NULL,
    COMMON_NAME TEXT,
    DOMESTIC_STATUS TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW()
    );

-- Breed
CREATE TABLE IF NOT EXISTS PAWCIAL.BREED (
                                             ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    SPECIES_ID UUID NOT NULL,
    NAME TEXT NOT NULL,
    ORIGIN TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (SPECIES_ID, NAME)
    );

-- Facility
CREATE TABLE IF NOT EXISTS PAWCIAL.FACILITY (
                                                ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    NAME TEXT NOT NULL,
    TYPE TEXT,
    COUNTRY TEXT,
    CITY TEXT,
    ADDRESS TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW()
    );

-- Facility Zone
CREATE TABLE IF NOT EXISTS PAWCIAL.FACILITY_ZONE (
                                                     ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    FACILITY_ID UUID NOT NULL,
    NAME TEXT NOT NULL,
    PURPOSE TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (FACILITY_ID, NAME)
    );

-- Facility Unit
CREATE TABLE IF NOT EXISTS PAWCIAL.FACILITY_UNIT (
                                                     ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    FACILITY_ID UUID NOT NULL,
    ZONE_ID UUID,
    CODE TEXT NOT NULL,
    TYPE TEXT NOT NULL,
    CAPACITY INT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (FACILITY_ID, CODE),
    CONSTRAINT CK_UNIT_CAPACITY CHECK (CAPACITY IS NULL OR CAPACITY >= 0)
    );

-- Person
CREATE TABLE IF NOT EXISTS PAWCIAL.PERSON (
                                              ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    FULL_NAME TEXT NOT NULL,
    PHONE TEXT,
    EMAIL TEXT,
    ADDRESS TEXT,
    NOTES TEXT,
    IS_ORGANIZATION BOOLEAN DEFAULT FALSE,
    ORGANIZATION_NAME TEXT,
    ORGANIZATION_TYPE TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW()
    );

-- Volunteer
CREATE TABLE IF NOT EXISTS PAWCIAL.VOLUNTEER (
                                                 ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    PERSON_ID UUID NOT NULL,
    STATUS TEXT NOT NULL DEFAULT 'ACTIVE',
    START_DATE DATE NOT NULL,
    END_DATE DATE,
    VOLUNTEER_CODE TEXT,
    NOTES TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT CK_VOLUNTEER_DATES CHECK (END_DATE IS NULL OR END_DATE >= START_DATE)
    );

-- Volunteer Area
CREATE TABLE IF NOT EXISTS PAWCIAL.VOLUNTEER_AREA (
                                                      VOLUNTEER_ID UUID NOT NULL,
                                                      AREA_CODE TEXT NOT NULL,
                                                      PROFICIENCY_LEVEL TEXT,
                                                      NOTES TEXT,
                                                      CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (VOLUNTEER_ID, AREA_CODE)
    );

-- Volunteer Activity
CREATE TABLE IF NOT EXISTS PAWCIAL.VOLUNTEER_ACTIVITY (
                                                          ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    VOLUNTEER_ID UUID NOT NULL,
    ACTIVITY_DATE DATE NOT NULL,
    AREA_CODE TEXT,
    HOURS NUMERIC(5,2),
    DESCRIPTION TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW()
    );

-- Animal
CREATE TABLE IF NOT EXISTS PAWCIAL.ANIMAL (
                                              ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    SPECIES_ID UUID NOT NULL,
    BREED_ID UUID,
    NAME TEXT,
    SEX TEXT,
    BIRTH_DATE DATE,
    AGE_MONTHS_EST INT,
    SIZE TEXT,
    COLOR TEXT,
    TRAINING_LEVEL TEXT,
    STERILIZED BOOLEAN,
    IS_MIXED BOOLEAN DEFAULT FALSE,
    ORIGIN_NOTE TEXT,
    CURRENT_UNIT_ID UUID,
    CURRENT_SINCE TIMESTAMPTZ,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW()
    );

-- Animal Breed Composition
CREATE TABLE IF NOT EXISTS PAWCIAL.ANIMAL_BREED_COMPOSITION (
                                                                ANIMAL_ID UUID NOT NULL,
                                                                BREED_ID UUID NOT NULL,
                                                                PERCENTAGE NUMERIC(5,2),
    NOTES TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (ANIMAL_ID, BREED_ID),
    CONSTRAINT CK_BREED_PERCENTAGE CHECK (PERCENTAGE > 0 AND PERCENTAGE <= 100)
    );

-- Animal Temperament
CREATE TABLE IF NOT EXISTS PAWCIAL.ANIMAL_TEMPERAMENT (
                                                          ANIMAL_ID UUID NOT NULL,
                                                          TEMPERAMENT_CODE TEXT NOT NULL,
                                                          PRIMARY KEY (ANIMAL_ID, TEMPERAMENT_CODE)
    );

-- Animal Health Flag
CREATE TABLE IF NOT EXISTS PAWCIAL.ANIMAL_HEALTH_FLAG (
                                                          ANIMAL_ID UUID NOT NULL,
                                                          HEALTH_CODE TEXT NOT NULL,
                                                          PRIMARY KEY (ANIMAL_ID, HEALTH_CODE)
    );

-- Animal Event
CREATE TABLE IF NOT EXISTS PAWCIAL.ANIMAL_EVENT (
                                                    ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    ANIMAL_ID UUID NOT NULL,
    EVENT_TYPE TEXT NOT NULL,
    EVENT_AT TIMESTAMPTZ NOT NULL,
    FACILITY_ID UUID,
    UNIT_ID UUID,
    FROM_FACILITY_ID UUID,
    TO_FACILITY_ID UUID,
    FROM_UNIT_ID UUID,
    TO_UNIT_ID UUID,
    OUTCOME_TYPE TEXT,
    SOURCE_TYPE TEXT,
    HOLD_TYPE TEXT,
    PERSON_ID UUID,
    VOLUNTEER_ID UUID,
    MED_EVENT_TYPE TEXT,
    VACCINE_CODE TEXT,
    MEDICATION_NAME TEXT,
    DOSE_TEXT TEXT,
    ROUTE TEXT,
    LAB_TEST_NAME TEXT,
    RESULT_TEXT TEXT,
    NEXT_DUE_DATE DATE,
    VET_NAME TEXT,
    DETAILS TEXT,
    CONSTRAINT CK_EVENT_TRANSFER_FIELDS CHECK (
                                                  EVENT_TYPE <> 'TRANSFER' OR
(FROM_FACILITY_ID IS NOT NULL AND TO_FACILITY_ID IS NOT NULL
                                                  AND FROM_UNIT_ID IS NOT NULL AND TO_UNIT_ID IS NOT NULL)
    ),
    CONSTRAINT CK_EVENT_INTAKE_FIELDS CHECK (
                                                EVENT_TYPE <> 'INTAKE' OR
(FACILITY_ID IS NOT NULL AND SOURCE_TYPE IS NOT NULL)
    ),
    CONSTRAINT CK_EVENT_OUTCOME_FIELDS CHECK (
                                                 EVENT_TYPE <> 'OUTCOME' OR
(FACILITY_ID IS NOT NULL AND OUTCOME_TYPE IS NOT NULL)
    ),
    CONSTRAINT CK_EVENT_HOLD_START_FIELDS CHECK (
                                                    EVENT_TYPE <> 'HOLD_START' OR
    (FACILITY_ID IS NOT NULL AND (UNIT_ID IS NOT NULL OR TO_UNIT_ID IS NOT NULL)
    AND HOLD_TYPE IS NOT NULL)
    ),
    CONSTRAINT CK_EVENT_HOLD_END_FIELDS CHECK (
                                                  EVENT_TYPE <> 'HOLD_END' OR (HOLD_TYPE IS NOT NULL)
    ),
    CONSTRAINT CK_EVENT_VACCINE_REQ CHECK (
                                              MED_EVENT_TYPE <> 'VACCINE' OR (VACCINE_CODE IS NOT NULL)
    ),
    CONSTRAINT CK_EVENT_TREATMENT_REQ CHECK (
                                                MED_EVENT_TYPE <> 'TREATMENT' OR
(MEDICATION_NAME IS NOT NULL OR DOSE_TEXT IS NOT NULL)
    ),
    CONSTRAINT CK_EVENT_LAB_REQ CHECK (
                                          MED_EVENT_TYPE <> 'LAB' OR (LAB_TEST_NAME IS NOT NULL)
    )
    );

-- Animal Placement
CREATE TABLE IF NOT EXISTS PAWCIAL.ANIMAL_PLACEMENT (
                                                        ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    ANIMAL_ID UUID NOT NULL,
    PERSON_ID UUID NOT NULL,
    PLACEMENT_TYPE TEXT NOT NULL,
    STATUS TEXT NOT NULL DEFAULT 'ACTIVE',
    START_DATE DATE NOT NULL,
    END_DATE DATE,
    EXPECTED_END_DATE DATE,
    PLACEMENT_FEE NUMERIC(12,2),
    NOTES TEXT,
    INTAKE_EVENT_ID UUID,
    OUTCOME_EVENT_ID UUID,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT CK_PLACEMENT_DATES CHECK (
                                            END_DATE IS NULL OR END_DATE >= START_DATE
                                        )
    );

-- Animal Observation
CREATE TABLE IF NOT EXISTS PAWCIAL.ANIMAL_OBSERVATION (
                                                          ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    ANIMAL_ID UUID NOT NULL,
    PLACEMENT_ID UUID,
    PERSON_ID UUID NOT NULL,
    OBSERVATION_DATE DATE NOT NULL DEFAULT CURRENT_DATE,
    CATEGORY TEXT NOT NULL,
    TITLE TEXT,
    DESCRIPTION TEXT NOT NULL,
    SEVERITY TEXT,
    ATTACHMENT_PATH TEXT,
    REQUIRES_VET_ATTENTION BOOLEAN DEFAULT FALSE,
    RESOLVED BOOLEAN DEFAULT FALSE,
    RESOLVED_AT TIMESTAMPTZ,
    RESOLUTION_NOTES TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW()
    );

-- Asset
CREATE TABLE IF NOT EXISTS PAWCIAL.ASSET (
                                             ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    FACILITY_ID UUID NOT NULL,
    UNIT_ID UUID,
    CODE TEXT NOT NULL,
    NAME TEXT NOT NULL,
    TYPE TEXT,
    SERIAL_NO TEXT,
    PURCHASE_DATE DATE,
    WARRANTY_END DATE,
    STATUS TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UPDATED_AT TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (FACILITY_ID, CODE)
    );

-- Asset Service
CREATE TABLE IF NOT EXISTS PAWCIAL.ASSET_SERVICE (
                                                     ID UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    ASSET_ID UUID NOT NULL,
    SERVICE_AT TIMESTAMPTZ NOT NULL,
    SERVICE_TYPE TEXT,
    VENDOR TEXT,
    COST NUMERIC(12,2),
    NOTES TEXT,
    CREATED_AT TIMESTAMPTZ DEFAULT NOW()
    );

-- ============================================================
-- FOREIGN KEY CONSTRAINTS
-- ============================================================

-- Species
ALTER TABLE PAWCIAL.SPECIES
DROP CONSTRAINT IF EXISTS FK_SPECIES_DOMESTIC_STATUS,
  ADD CONSTRAINT FK_SPECIES_DOMESTIC_STATUS
  FOREIGN KEY (DOMESTIC_STATUS) REFERENCES PAWCIAL.DICT_DOMESTIC_STATUS(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

-- Breed
ALTER TABLE PAWCIAL.BREED
DROP CONSTRAINT IF EXISTS FK_BREED_SPECIES,
  ADD CONSTRAINT FK_BREED_SPECIES
  FOREIGN KEY (SPECIES_ID) REFERENCES PAWCIAL.SPECIES(ID)
  ON DELETE CASCADE;

-- Facility
ALTER TABLE PAWCIAL.FACILITY
DROP CONSTRAINT IF EXISTS FK_FACILITY_TYPE,
  ADD CONSTRAINT FK_FACILITY_TYPE
  FOREIGN KEY (TYPE) REFERENCES PAWCIAL.DICT_FACILITY_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

-- Facility Zone
ALTER TABLE PAWCIAL.FACILITY_ZONE
DROP CONSTRAINT IF EXISTS FK_ZONE_FACILITY,
  ADD CONSTRAINT FK_ZONE_FACILITY
  FOREIGN KEY (FACILITY_ID) REFERENCES PAWCIAL.FACILITY(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.FACILITY_ZONE
DROP CONSTRAINT IF EXISTS FK_ZONE_PURPOSE,
  ADD CONSTRAINT FK_ZONE_PURPOSE
  FOREIGN KEY (PURPOSE) REFERENCES PAWCIAL.DICT_ZONE_PURPOSE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

-- Facility Unit
ALTER TABLE PAWCIAL.FACILITY_UNIT
DROP CONSTRAINT IF EXISTS FK_UNIT_FACILITY,
  ADD CONSTRAINT FK_UNIT_FACILITY
  FOREIGN KEY (FACILITY_ID) REFERENCES PAWCIAL.FACILITY(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.FACILITY_UNIT
DROP CONSTRAINT IF EXISTS FK_UNIT_ZONE,
  ADD CONSTRAINT FK_UNIT_ZONE
  FOREIGN KEY (ZONE_ID) REFERENCES PAWCIAL.FACILITY_ZONE(ID)
  ON DELETE SET NULL;

ALTER TABLE PAWCIAL.FACILITY_UNIT
DROP CONSTRAINT IF EXISTS FK_UNIT_TYPE,
  ADD CONSTRAINT FK_UNIT_TYPE
  FOREIGN KEY (TYPE) REFERENCES PAWCIAL.DICT_UNIT_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

-- Volunteer
ALTER TABLE PAWCIAL.VOLUNTEER
DROP CONSTRAINT IF EXISTS FK_VOLUNTEER_PERSON,
  ADD CONSTRAINT FK_VOLUNTEER_PERSON
  FOREIGN KEY (PERSON_ID) REFERENCES PAWCIAL.PERSON(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.VOLUNTEER
DROP CONSTRAINT IF EXISTS FK_VOLUNTEER_STATUS,
  ADD CONSTRAINT FK_VOLUNTEER_STATUS
  FOREIGN KEY (STATUS) REFERENCES PAWCIAL.DICT_VOLUNTEER_STATUS(CODE)
  ON UPDATE CASCADE ON DELETE RESTRICT;

-- Volunteer Area
ALTER TABLE PAWCIAL.VOLUNTEER_AREA
DROP CONSTRAINT IF EXISTS FK_VOLUNTEER_AREA_VOLUNTEER,
  ADD CONSTRAINT FK_VOLUNTEER_AREA_VOLUNTEER
  FOREIGN KEY (VOLUNTEER_ID) REFERENCES PAWCIAL.VOLUNTEER(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.VOLUNTEER_AREA
DROP CONSTRAINT IF EXISTS FK_VOLUNTEER_AREA_CODE,
  ADD CONSTRAINT FK_VOLUNTEER_AREA_CODE
  FOREIGN KEY (AREA_CODE) REFERENCES PAWCIAL.DICT_VOLUNTEER_AREA(CODE)
  ON DELETE RESTRICT;

-- Volunteer Activity
ALTER TABLE PAWCIAL.VOLUNTEER_ACTIVITY
DROP CONSTRAINT IF EXISTS FK_VOLUNTEER_ACTIVITY_VOLUNTEER,
  ADD CONSTRAINT FK_VOLUNTEER_ACTIVITY_VOLUNTEER
  FOREIGN KEY (VOLUNTEER_ID) REFERENCES PAWCIAL.VOLUNTEER(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.VOLUNTEER_ACTIVITY
DROP CONSTRAINT IF EXISTS FK_VOLUNTEER_ACTIVITY_AREA,
  ADD CONSTRAINT FK_VOLUNTEER_ACTIVITY_AREA
  FOREIGN KEY (AREA_CODE) REFERENCES PAWCIAL.DICT_VOLUNTEER_AREA(CODE);

-- Animal
ALTER TABLE PAWCIAL.ANIMAL
DROP CONSTRAINT IF EXISTS FK_ANIMAL_SPECIES,
  ADD CONSTRAINT FK_ANIMAL_SPECIES
  FOREIGN KEY (SPECIES_ID) REFERENCES PAWCIAL.SPECIES(ID);

ALTER TABLE PAWCIAL.ANIMAL
DROP CONSTRAINT IF EXISTS FK_ANIMAL_BREED,
  ADD CONSTRAINT FK_ANIMAL_BREED
  FOREIGN KEY (BREED_ID) REFERENCES PAWCIAL.BREED(ID);

ALTER TABLE PAWCIAL.ANIMAL
DROP CONSTRAINT IF EXISTS FK_ANIMAL_SEX,
  ADD CONSTRAINT FK_ANIMAL_SEX
  FOREIGN KEY (SEX) REFERENCES PAWCIAL.DICT_SEX(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ANIMAL
DROP CONSTRAINT IF EXISTS FK_ANIMAL_SIZE,
  ADD CONSTRAINT FK_ANIMAL_SIZE
  FOREIGN KEY (SIZE) REFERENCES PAWCIAL.DICT_SIZE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ANIMAL
DROP CONSTRAINT IF EXISTS FK_ANIMAL_COLOR,
  ADD CONSTRAINT FK_ANIMAL_COLOR
  FOREIGN KEY (COLOR) REFERENCES PAWCIAL.DICT_COLOR(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ANIMAL
DROP CONSTRAINT IF EXISTS FK_ANIMAL_TRAINING_LEVEL,
  ADD CONSTRAINT FK_ANIMAL_TRAINING_LEVEL
  FOREIGN KEY (TRAINING_LEVEL) REFERENCES PAWCIAL.DICT_TRAINING_LEVEL(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

-- Animal Breed Composition
ALTER TABLE PAWCIAL.ANIMAL_BREED_COMPOSITION
DROP CONSTRAINT IF EXISTS FK_ANIMAL_BREED_COMP_ANIMAL,
  ADD CONSTRAINT FK_ANIMAL_BREED_COMP_ANIMAL
  FOREIGN KEY (ANIMAL_ID) REFERENCES PAWCIAL.ANIMAL(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.ANIMAL_BREED_COMPOSITION
DROP CONSTRAINT IF EXISTS FK_ANIMAL_BREED_COMP_BREED,
  ADD CONSTRAINT FK_ANIMAL_BREED_COMP_BREED
  FOREIGN KEY (BREED_ID) REFERENCES PAWCIAL.BREED(ID)
  ON DELETE RESTRICT;

-- Animal Temperament
ALTER TABLE PAWCIAL.ANIMAL_TEMPERAMENT
DROP CONSTRAINT IF EXISTS FK_ANIMAL_TEMPERAMENT_ANIMAL,
  ADD CONSTRAINT FK_ANIMAL_TEMPERAMENT_ANIMAL
  FOREIGN KEY (ANIMAL_ID) REFERENCES PAWCIAL.ANIMAL(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.ANIMAL_TEMPERAMENT
DROP CONSTRAINT IF EXISTS FK_ANIMAL_TEMPERAMENT_CODE,
  ADD CONSTRAINT FK_ANIMAL_TEMPERAMENT_CODE
  FOREIGN KEY (TEMPERAMENT_CODE) REFERENCES PAWCIAL.DICT_TEMPERAMENT(CODE)
  ON DELETE RESTRICT;

-- Animal Health Flag
ALTER TABLE PAWCIAL.ANIMAL_HEALTH_FLAG
DROP CONSTRAINT IF EXISTS FK_ANIMAL_HEALTH_FLAG_ANIMAL,
  ADD CONSTRAINT FK_ANIMAL_HEALTH_FLAG_ANIMAL
  FOREIGN KEY (ANIMAL_ID) REFERENCES PAWCIAL.ANIMAL(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.ANIMAL_HEALTH_FLAG
DROP CONSTRAINT IF EXISTS FK_ANIMAL_HEALTH_FLAG_CODE,
  ADD CONSTRAINT FK_ANIMAL_HEALTH_FLAG_CODE
  FOREIGN KEY (HEALTH_CODE) REFERENCES PAWCIAL.DICT_HEALTH_FLAG(CODE)
  ON DELETE RESTRICT;

-- Animal Event
ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_ANIMAL,
  ADD CONSTRAINT FK_EVENT_ANIMAL
  FOREIGN KEY (ANIMAL_ID) REFERENCES PAWCIAL.ANIMAL(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_TYPE,
  ADD CONSTRAINT FK_EVENT_TYPE
  FOREIGN KEY (EVENT_TYPE) REFERENCES PAWCIAL.DICT_EVENT_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_FACILITY,
  ADD CONSTRAINT FK_EVENT_FACILITY
  FOREIGN KEY (FACILITY_ID) REFERENCES PAWCIAL.FACILITY(ID);

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_UNIT,
  ADD CONSTRAINT FK_EVENT_UNIT
  FOREIGN KEY (UNIT_ID) REFERENCES PAWCIAL.FACILITY_UNIT(ID);

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_FROM_FACILITY,
  ADD CONSTRAINT FK_EVENT_FROM_FACILITY
  FOREIGN KEY (FROM_FACILITY_ID) REFERENCES PAWCIAL.FACILITY(ID);

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_TO_FACILITY,
  ADD CONSTRAINT FK_EVENT_TO_FACILITY
  FOREIGN KEY (TO_FACILITY_ID) REFERENCES PAWCIAL.FACILITY(ID);

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_FROM_UNIT,
  ADD CONSTRAINT FK_EVENT_FROM_UNIT
  FOREIGN KEY (FROM_UNIT_ID) REFERENCES PAWCIAL.FACILITY_UNIT(ID);

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_TO_UNIT,
  ADD CONSTRAINT FK_EVENT_TO_UNIT
  FOREIGN KEY (TO_UNIT_ID) REFERENCES PAWCIAL.FACILITY_UNIT(ID);

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_SOURCE_TYPE,
  ADD CONSTRAINT FK_EVENT_SOURCE_TYPE
  FOREIGN KEY (SOURCE_TYPE) REFERENCES PAWCIAL.DICT_SOURCE_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_OUTCOME_TYPE,
  ADD CONSTRAINT FK_EVENT_OUTCOME_TYPE
  FOREIGN KEY (OUTCOME_TYPE) REFERENCES PAWCIAL.DICT_OUTCOME_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_HOLD_TYPE,
  ADD CONSTRAINT FK_EVENT_HOLD_TYPE
  FOREIGN KEY (HOLD_TYPE) REFERENCES PAWCIAL.DICT_HOLD_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_PERSON,
  ADD CONSTRAINT FK_EVENT_PERSON
  FOREIGN KEY (PERSON_ID) REFERENCES PAWCIAL.PERSON(ID);

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_VOLUNTEER,
  ADD CONSTRAINT FK_EVENT_VOLUNTEER
  FOREIGN KEY (VOLUNTEER_ID) REFERENCES PAWCIAL.VOLUNTEER(ID)
  ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_MED_TYPE,
  ADD CONSTRAINT FK_EVENT_MED_TYPE
  FOREIGN KEY (MED_EVENT_TYPE) REFERENCES PAWCIAL.DICT_MED_EVENT_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_VACCINE_CODE,
  ADD CONSTRAINT FK_EVENT_VACCINE_CODE
  FOREIGN KEY (VACCINE_CODE) REFERENCES PAWCIAL.DICT_VACCINE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ANIMAL_EVENT
DROP CONSTRAINT IF EXISTS FK_EVENT_ROUTE,
  ADD CONSTRAINT FK_EVENT_ROUTE
  FOREIGN KEY (ROUTE) REFERENCES PAWCIAL.DICT_DOSE_ROUTE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

-- Animal Placement
ALTER TABLE PAWCIAL.ANIMAL_PLACEMENT
DROP CONSTRAINT IF EXISTS FK_PLACEMENT_ANIMAL,
  ADD CONSTRAINT FK_PLACEMENT_ANIMAL
  FOREIGN KEY (ANIMAL_ID) REFERENCES PAWCIAL.ANIMAL(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.ANIMAL_PLACEMENT
DROP CONSTRAINT IF EXISTS FK_PLACEMENT_PERSON,
  ADD CONSTRAINT FK_PLACEMENT_PERSON
  FOREIGN KEY (PERSON_ID) REFERENCES PAWCIAL.PERSON(ID)
  ON DELETE RESTRICT;

ALTER TABLE PAWCIAL.ANIMAL_PLACEMENT
DROP CONSTRAINT IF EXISTS FK_PLACEMENT_TYPE,
  ADD CONSTRAINT FK_PLACEMENT_TYPE
  FOREIGN KEY (PLACEMENT_TYPE) REFERENCES PAWCIAL.DICT_PLACEMENT_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE PAWCIAL.ANIMAL_PLACEMENT
DROP CONSTRAINT IF EXISTS FK_PLACEMENT_STATUS,
  ADD CONSTRAINT FK_PLACEMENT_STATUS
  FOREIGN KEY (STATUS) REFERENCES PAWCIAL.DICT_PLACEMENT_STATUS(CODE)
  ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE PAWCIAL.ANIMAL_PLACEMENT
DROP CONSTRAINT IF EXISTS FK_PLACEMENT_INTAKE_EVENT,
  ADD CONSTRAINT FK_PLACEMENT_INTAKE_EVENT
  FOREIGN KEY (INTAKE_EVENT_ID) REFERENCES PAWCIAL.ANIMAL_EVENT(ID);

ALTER TABLE PAWCIAL.ANIMAL_PLACEMENT
DROP CONSTRAINT IF EXISTS FK_PLACEMENT_OUTCOME_EVENT,
  ADD CONSTRAINT FK_PLACEMENT_OUTCOME_EVENT
  FOREIGN KEY (OUTCOME_EVENT_ID) REFERENCES PAWCIAL.ANIMAL_EVENT(ID);

-- Animal Observation
ALTER TABLE PAWCIAL.ANIMAL_OBSERVATION
DROP CONSTRAINT IF EXISTS FK_OBSERVATION_ANIMAL,
  ADD CONSTRAINT FK_OBSERVATION_ANIMAL
  FOREIGN KEY (ANIMAL_ID) REFERENCES PAWCIAL.ANIMAL(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.ANIMAL_OBSERVATION
DROP CONSTRAINT IF EXISTS FK_OBSERVATION_PLACEMENT,
  ADD CONSTRAINT FK_OBSERVATION_PLACEMENT
  FOREIGN KEY (PLACEMENT_ID) REFERENCES PAWCIAL.ANIMAL_PLACEMENT(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.ANIMAL_OBSERVATION
DROP CONSTRAINT IF EXISTS FK_OBSERVATION_PERSON,
  ADD CONSTRAINT FK_OBSERVATION_PERSON
  FOREIGN KEY (PERSON_ID) REFERENCES PAWCIAL.PERSON(ID)
  ON DELETE RESTRICT;

ALTER TABLE PAWCIAL.ANIMAL_OBSERVATION
DROP CONSTRAINT IF EXISTS FK_OBSERVATION_CATEGORY,
  ADD CONSTRAINT FK_OBSERVATION_CATEGORY
  FOREIGN KEY (CATEGORY) REFERENCES PAWCIAL.DICT_OBSERVATION_CATEGORY(CODE)
  ON UPDATE CASCADE ON DELETE RESTRICT;

-- Asset
ALTER TABLE PAWCIAL.ASSET
DROP CONSTRAINT IF EXISTS FK_ASSET_FACILITY,
  ADD CONSTRAINT FK_ASSET_FACILITY
  FOREIGN KEY (FACILITY_ID) REFERENCES PAWCIAL.FACILITY(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.ASSET
DROP CONSTRAINT IF EXISTS FK_ASSET_UNIT,
  ADD CONSTRAINT FK_ASSET_UNIT
  FOREIGN KEY (UNIT_ID) REFERENCES PAWCIAL.FACILITY_UNIT(ID)
  ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ASSET
DROP CONSTRAINT IF EXISTS FK_ASSET_TYPE,
  ADD CONSTRAINT FK_ASSET_TYPE
  FOREIGN KEY (TYPE) REFERENCES PAWCIAL.DICT_ASSET_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE PAWCIAL.ASSET
DROP CONSTRAINT IF EXISTS FK_ASSET_STATUS,
  ADD CONSTRAINT FK_ASSET_STATUS
  FOREIGN KEY (STATUS) REFERENCES PAWCIAL.DICT_ASSET_STATUS(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

-- Asset Service
ALTER TABLE PAWCIAL.ASSET_SERVICE
DROP CONSTRAINT IF EXISTS FK_ASSET_SERVICE_ASSET,
  ADD CONSTRAINT FK_ASSET_SERVICE_ASSET
  FOREIGN KEY (ASSET_ID) REFERENCES PAWCIAL.ASSET(ID)
  ON DELETE CASCADE;

ALTER TABLE PAWCIAL.ASSET_SERVICE
DROP CONSTRAINT IF EXISTS FK_ASSET_SERVICE_TYPE,
  ADD CONSTRAINT FK_ASSET_SERVICE_TYPE
  FOREIGN KEY (SERVICE_TYPE) REFERENCES PAWCIAL.DICT_SERVICE_TYPE(CODE)
  ON UPDATE CASCADE ON DELETE SET NULL;

-- ============================================================
-- INDEXES
-- ============================================================

-- Breed
CREATE INDEX IF NOT EXISTS IDX_BREED_SPECIES_ID ON PAWCIAL.BREED(SPECIES_ID);

-- Facility Zone
CREATE INDEX IF NOT EXISTS IDX_ZONE_FACILITY_ID ON PAWCIAL.FACILITY_ZONE(FACILITY_ID);

-- Facility Unit
CREATE INDEX IF NOT EXISTS IDX_UNIT_FACILITY_ID ON PAWCIAL.FACILITY_UNIT(FACILITY_ID);
CREATE INDEX IF NOT EXISTS IDX_UNIT_ZONE_ID ON PAWCIAL.FACILITY_UNIT(ZONE_ID);

-- Person
CREATE INDEX IF NOT EXISTS IDX_PERSON_IS_ORG ON PAWCIAL.PERSON(IS_ORGANIZATION);

-- Volunteer
CREATE INDEX IF NOT EXISTS IDX_VOLUNTEER_PERSON_ID ON PAWCIAL.VOLUNTEER(PERSON_ID);
CREATE INDEX IF NOT EXISTS IDX_VOLUNTEER_STATUS ON PAWCIAL.VOLUNTEER(STATUS);
CREATE UNIQUE INDEX IF NOT EXISTS IDX_ONE_ACTIVE_VOLUNTEER_PER_PERSON
    ON PAWCIAL.VOLUNTEER(PERSON_ID) WHERE STATUS = 'ACTIVE';

-- Volunteer Area
CREATE INDEX IF NOT EXISTS IDX_VOLUNTEER_AREA_VOLUNTEER ON PAWCIAL.VOLUNTEER_AREA(VOLUNTEER_ID);
CREATE INDEX IF NOT EXISTS IDX_VOLUNTEER_AREA_CODE ON PAWCIAL.VOLUNTEER_AREA(AREA_CODE);

-- Volunteer Activity
CREATE INDEX IF NOT EXISTS IDX_VOLUNTEER_ACTIVITY_VOLUNTEER ON PAWCIAL.VOLUNTEER_ACTIVITY(VOLUNTEER_ID);
CREATE INDEX IF NOT EXISTS IDX_VOLUNTEER_ACTIVITY_DATE ON PAWCIAL.VOLUNTEER_ACTIVITY(ACTIVITY_DATE DESC);

-- Animal
CREATE INDEX IF NOT EXISTS IDX_ANIMAL_SPECIES_ID ON PAWCIAL.ANIMAL(SPECIES_ID);
CREATE INDEX IF NOT EXISTS IDX_ANIMAL_BREED_ID ON PAWCIAL.ANIMAL(BREED_ID);
CREATE INDEX IF NOT EXISTS IDX_ANIMAL_CURRENT_UNIT_ID ON PAWCIAL.ANIMAL(CURRENT_UNIT_ID);

-- Animal Breed Composition
CREATE INDEX IF NOT EXISTS IDX_ANIMAL_BREED_COMP_ANIMAL ON PAWCIAL.ANIMAL_BREED_COMPOSITION(ANIMAL_ID);
CREATE INDEX IF NOT EXISTS IDX_ANIMAL_BREED_COMP_BREED ON PAWCIAL.ANIMAL_BREED_COMPOSITION(BREED_ID);

-- Animal Event
CREATE INDEX IF NOT EXISTS IDX_EVENT_ANIMAL_AT ON PAWCIAL.ANIMAL_EVENT(ANIMAL_ID, EVENT_AT DESC);
CREATE INDEX IF NOT EXISTS IDX_EVENT_TYPE_AT ON PAWCIAL.ANIMAL_EVENT(EVENT_TYPE, EVENT_AT DESC);
CREATE INDEX IF NOT EXISTS IDX_EVENT_FACILITY ON PAWCIAL.ANIMAL_EVENT(FACILITY_ID, EVENT_AT DESC);
CREATE INDEX IF NOT EXISTS IDX_EVENT_VOLUNTEER_ID ON PAWCIAL.ANIMAL_EVENT(VOLUNTEER_ID) WHERE VOLUNTEER_ID IS NOT NULL;
CREATE INDEX IF NOT EXISTS IDX_EVENT_MEDTYPE ON PAWCIAL.ANIMAL_EVENT(MED_EVENT_TYPE, EVENT_AT DESC);
CREATE INDEX IF NOT EXISTS IDX_EVENT_VACCINE ON PAWCIAL.ANIMAL_EVENT(VACCINE_CODE, EVENT_AT DESC);
CREATE INDEX IF NOT EXISTS IDX_EVENT_NEXTDUE ON PAWCIAL.ANIMAL_EVENT(NEXT_DUE_DATE);

-- Animal Placement
CREATE INDEX IF NOT EXISTS IDX_PLACEMENT_ANIMAL ON PAWCIAL.ANIMAL_PLACEMENT(ANIMAL_ID);
CREATE INDEX IF NOT EXISTS IDX_PLACEMENT_PERSON ON PAWCIAL.ANIMAL_PLACEMENT(PERSON_ID);
CREATE INDEX IF NOT EXISTS IDX_PLACEMENT_TYPE ON PAWCIAL.ANIMAL_PLACEMENT(PLACEMENT_TYPE);
CREATE INDEX IF NOT EXISTS IDX_PLACEMENT_STATUS ON PAWCIAL.ANIMAL_PLACEMENT(STATUS);
CREATE INDEX IF NOT EXISTS IDX_PLACEMENT_DATES ON PAWCIAL.ANIMAL_PLACEMENT(START_DATE, END_DATE);
CREATE UNIQUE INDEX IF NOT EXISTS IDX_ONE_ACTIVE_PLACEMENT_PER_ANIMAL
    ON PAWCIAL.ANIMAL_PLACEMENT(ANIMAL_ID) WHERE STATUS = 'ACTIVE';

-- Animal Observation
CREATE INDEX IF NOT EXISTS IDX_OBSERVATION_ANIMAL ON PAWCIAL.ANIMAL_OBSERVATION(ANIMAL_ID);
CREATE INDEX IF NOT EXISTS IDX_OBSERVATION_PLACEMENT ON PAWCIAL.ANIMAL_OBSERVATION(PLACEMENT_ID);
CREATE INDEX IF NOT EXISTS IDX_OBSERVATION_PERSON ON PAWCIAL.ANIMAL_OBSERVATION(PERSON_ID);
CREATE INDEX IF NOT EXISTS IDX_OBSERVATION_CATEGORY ON PAWCIAL.ANIMAL_OBSERVATION(CATEGORY);
CREATE INDEX IF NOT EXISTS IDX_OBSERVATION_DATE ON PAWCIAL.ANIMAL_OBSERVATION(OBSERVATION_DATE DESC);
CREATE INDEX IF NOT EXISTS IDX_OBSERVATION_SEVERITY ON PAWCIAL.ANIMAL_OBSERVATION(SEVERITY) WHERE SEVERITY IS NOT NULL;

-- Asset
CREATE INDEX IF NOT EXISTS IDX_ASSET_FACILITY_ID ON PAWCIAL.ASSET(FACILITY_ID);
CREATE INDEX IF NOT EXISTS IDX_ASSET_UNIT_ID ON PAWCIAL.ASSET(UNIT_ID);

-- Asset Service
CREATE INDEX IF NOT EXISTS IDX_ASSET_SERVICE_ASSET_ID ON PAWCIAL.ASSET_SERVICE(ASSET_ID);